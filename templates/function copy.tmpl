{{define "assertion" -}}
tt.assertion(t, {{if .OnlyReturnsError}}{{template "call" .}}{{else}}err{{end}}
{{- if or (not .Subtests) .PrintInputs -}}
    , fmt.Sprintf("{{template "message" .}}", {{template "inputs" .}})
{{- end -}}
)
{{- end}}


{{define "equal"}}assert.Equal{{if or (not .Subtests) .PrintInputs}}f{{end}}{{end}}


{{define "msg"}}{{if or (not .Subtests) .PrintInputs}} , "{{template "message" .}}", {{template "inputs" .}}{{end}}{{end}} 


{{define "function"}}
{{- $f := .}}

func {{.TestName}}(t *testing.T) {
	type testcase struct {
		Name string
		{{- with .Receiver}}
			{{- if .IsStruct}}
				{{- if .Fields}}
					{{- range .Fields}}
						{{Field .}} {{.Type}}
					{{- end}}
				{{- end}}
			{{- end}}
		{{- end}}
		{{- if .TestParameters}}
		type args struct {
			{{- range .TestParameters}}
					{{Param .}} {{.Type}}
			{{- end}}
		}
		{{- end}}
		{{- if .ReturnsError}}
		ExpectedError string
		{{- end}}
	}

	testCases := []testcase {
		{
			Name: "Test case description",
			{{- if .ReturnsError}}
			ExpectedError: "String here (empty if no error expected)",
			{{- end}}
		},
		// TODO: Add test cases.
	}

	{{- if .Parallel}}t.Parallel(){{end}}
	for {{if (or .Subtests (not .IsNaked))}} _, tcase := {{end}} range testCases {
		{{- if .Subtests}}
		tc := tcase
		t.Run(tc.Name, func(t *testing.T) {
			{{- if .Parallel}}t.Parallel(){{end}}
		{{- end}}
			{{- with .Receiver}}
				{{- if .IsStruct}}
					{{Receiver .}} := {{if .Type.IsStar}}&{{end}}{{.Type.Value}}{
					{{- range .Fields}}
						{{.Name}}: tt.fields.{{Field .}},
					{{- end}}
					}
				{{- end}}
			{{- end}}
			{{- range .Parameters}}
				{{- if .IsWriter}}
					{{Param .}} := &bytes.Buffer{}
				{{- end}}
			{{- end}}
			{{- if and (not .OnlyReturnsError) (not .OnlyReturnsOneValue) }}
				{{template "results" $f}} {{template "call" $f}}
			{{- end}}
			{{- if .ReturnsError}}
                {{template "assertion" $f}}
			{{- end}}
			{{- range .TestResults}}
				{{- if .IsWriter}}
                    {{template "equal" $f}}(t, tt.{{Want .}}, {{Param .}}.String(){{template "msg" $f}})
				{{- else}}
                    {{- if $f.OnlyReturnsOneValue}}
                        {{template "equal" $f}}(t, tt.{{Want .}}, {{template "inline" $f}}{{template "msg" $f}})
                    {{- else}}
                        {{template "equal" $f}}(t, tt.{{Want .}}, {{Got .}}{{template "msg" $f}})
                    {{- end}}
				{{- end}}
			{{- end}}
		{{- if .Subtests }} }) {{- end -}}
	}
}

{{end}}
