{{define "function"}}
{{- $f := .}}
{{- $returns := len .TestResults }}

func {{.TestName}}(t *testing.T) {
	{{- if .TestParameters}}
	type args struct {
		{{- range .TestParameters}}
		{{Param .}} {{.Type}}
		{{- end}}
	}

	{{ end}}
	type testcase struct {
		Name string
		{{- with .Receiver}}
		Receiver {{if .Type.IsStar}}*{{end}}{{.Type.Value}}
		{{- end}}
		{{- if .TestParameters}}
		Args args
		{{- end}}
		{{- if eq $returns 1 }}
			{{- $testResultsZero := index .TestResults 0 }}
			{{- with $testResultsZero }}
				ExpectedResult {{if .Type.IsStar}}*{{end}}{{.Type.Value}}
			{{- end}}
		{{- end}}
		{{- if gt $returns 1 }}
			{{- range $index, $el := .TestResults}}
			ExpectedResult{{$index}} {{$el.Type}}
			{{- end}}
		{{- end}}
		{{- if .ReturnsError}}
		ExpectedError string
		{{- end}}
	}

	testCases := []testcase {
		{
			Name: "Test case description",
			{{- with .Receiver}}
			Receiver: {{if .Type.IsStar}}&{{end}}{{.Type.Value}}{},
			{{- end}}
			{{- if .TestParameters}}
			Args: args{},
			{{- end}}
			{{- if eq $returns 1 }}
				{{- $testResultsZero := index .TestResults 0 }}
				{{- with $testResultsZero }}
					{{- if eq .Type.Value "string" }}
						ExpectedResult: "",
					{{- else }}
						// ExpectedResult: {{if .Type.IsStar}}&{{end}}{{.Type.Value}},
					{{- end }}
				{{- end}}
			{{- end}}
			{{- if gt $returns 1 }}
				{{- range $index, $el := .TestResults}}
					{{- if eq $el.Type.Value "string" }}
						ExpectedResult{{$index}}: "",
					{{- else }}
						// ExpectedResult{{$index}}: {{$el.Type.Value}},
					{{- end }}
				{{- end}}
			{{- end}}
			{{- if .ReturnsError}}
			ExpectedError: "String here (empty if no error expected)",
			{{- end}}
		},
		// TODO: Add test cases.
	}

	for _, tcase := range testCases {
		tc := tcase
		t.Run(tc.Name, func(t *testing.T) {
			{{- with .Receiver}}
			{{Receiver .}} := tc.Receiver
			{{- end}}

			{{- if $f.OnlyReturnsError}}
				err := {{template "call" .}}

				if tc.ExpectedError == "" {
					assert.Nil(t, err)
				} else {
					assert.EqualError(t, err, tc.ExpectedError)
				}
			{{- else if $f.OnlyReturnsOneValue}}
				result := {{template "call" .}}
				assert.Equal(t, tc.ExpectedResult, result)
			{{- else if and (eq $returns 1) ($f.ReturnsError) }}
				result, err := {{template "call" .}}

				if tc.ExpectedError == "" {
					if assert.Nil(t, err) {
						assert.Equal(t, tc.ExpectedResult, result)
					}
				} else {
					assert.EqualError(t, err, tc.ExpectedError)
				}
			{{- else if and (eq $returns 0) (not $f.ReturnsError) }}
				{{template "call" .}}
				// TODO: Add assertions
			{{- else }}
				{{template "results" .}} {{template "call" .}}
				{{- if $f.ReturnsError }}
					if tc.ExpectedError == "" {
						if assert.Nil(t, err) {
							{{- range $index, $el := .TestResults}}
							assert.Equal(t, tc.ExpectedResult{{$index}}, result{{$index}})
							{{- end }}
						}
					} else {
						assert.EqualError(t, err, tc.ExpectedError)
					}
				{{- else }}
					{{- range $index, $el := .TestResults}}
						assert.Equal(t, tc.ExpectedResult{{$index}}, result{{$index}})
					{{- end }}
				{{- end }}
			{{- end}}
		})
	}
}
{{end}}
